
{{/* list of repositories and output images */}}

{{ $repos := slice "loggregator-bridge" "persi" "persi-broker" "ssh" }}
{{ $images := slice "loggregator-bridge" "persi" "persi-broker" "ssh" "ssh-proxy" }}

{{/* configure default values */}}

{{/* $.docker */}}
{{ $ = dict | dict "docker" | merge $ }}
{{/* .docker.org */}}
{{ $ = merge (index $.docker "org" | default "splatform" | dict "org" | dict "docker") $ }}
{{/* .git */}}
{{ $ = dict | dict "git" | merge $ }}
{{/* .git.user */}}
{{ $ = merge (index $.git "user" | default "SUSE CFCIBot" | dict "user" | dict "git") $ }}
{{/* .git.email */}}
{{ $ = merge (index $.git "email" | default "cf-ci-bot@suse.de" | dict "email" | dict "git") $ }}
{{/* .repos */}}
{{ $ = dict | dict "repos" | merge $ }}
{{/* .repos.trigger */}}
{{ $ = merge (index $.repos "trigger" | default true | dict "trigger" | dict "repos") $ }}
{{/* .repos.org */}}
{{ $ = merge (index $.repos "org" | default "SUSE" | dict "org" | dict "repos") $ }}
{{/* .repos.<repo> */}}
{{ range $repos }}
{{ $ = merge (index $.repos . | default (printf "%s/eirini-%s" $.repos.org .) | dict . | dict "repos") $ }}
{{ end }}

{{/* This template builds a go binary from source */}}
{{/* Requires `.repo`, `.image`, and `.subdir` keys */}}
{{ define "direct-build" }}
- name: {{ $.image }}
  plan:
  - get: docker.build-base
  - get: git.{{ $.repo }}
    trigger: {{ $.repos.trigger }}
    version: every
  - task: build
    config:
      platform: linux
      inputs:
      - name: src
      outputs:
      - name: bin
      caches:
      - path: cache
      run:
        path: /bin/sh
        args:
        - -c
        - >
          set -o errexit -o nounset -o xtrace ;
          export GOCACHE=$PWD/cache ;
          OUTFILE=${PWD}/bin/{{ $.image }} ;
          cd src ;
          GO111MODULES=on go mod vendor ;
          CGO_ENABLED=0 go build -o ${OUTFILE} ./{{ $.subdir }}/
    image: docker.build-base
    input_mapping:
      src: git.{{ $.repo }}
  - task: image
    config:
      platform: linux
      inputs:
      - name: bin
      outputs:
      - name: image
      run:
        path: /bin/sh
        args:
        - -c
        - >
          set -o errexit -o nounset -o xtrace ;
          mkdir -p bin/tmp ;
          chmod a+rwx bin/tmp ;
          tar cf image/image.tar -C bin {{ $.image }} tmp ;
    image: docker.build-base
  - put: docker.{{ $.image }}
    params:
      import_file: image/image.tar
{{ end }}

groups:
- name: build-base
  jobs: [ build-base ]
- name: logging
  jobs: [ loggregator-bridge ]
- name: persi
  jobs: [ persi, persi-broker ]
- name: ssh
  jobs: [ ssh, ssh-proxy ]

resources:
# source GitHub repositories
{{ range $repos }}
- name: git.{{ . }}
  type: git
  source:
    branch: master
    uri: https://github.com/{{ index $.repos . }}
{{ end }}

# Docker image outputs
{{ range $images }}
- name: docker.{{ . }}
  type: docker-image
  source:
    repository: {{ $.docker.org }}/eirinix-{{ . }}
    username:   ((docker-username))
    password:   ((docker-password))
    build_args:
      user: {{ $.git.user }}
      email: {{ $.git.email }}

{{ end }}

# Docker image for building images
- name: docker.build-base
  type: docker-image
  source:
    repository: {{ $.docker.org }}/eirinix-build-base
    username:   ((docker-username))
    password:   ((docker-password))

jobs:

# Job to construct docker.build-base
- name: build-base
  plan:
  - task: dockerfile
    config:
      platform: linux
      image_resource:
        type: registry-image
        source: { repository: opensuse/leap }
      outputs:
      - name: out
      run:
        path: /bin/sh
        args:
        - -c
        - echo "${DATA}" > out/Dockerfile
      params:
        DATA: |
          FROM opensuse/leap
          RUN true \
            && zypper --non-interactive refresh \
            && zypper --non-interactive install \
              git-core \
              bzr \
              python-openssl \
              'go >= 1.12' \
              tar \
            && zypper --non-interactive clean
  - put: docker.build-base
    params:
      build: out

{{ if has $images "loggregator-bridge" }}
- name: loggregator-bridge
  plan:
  - get: git.loggregator-bridge
    trigger: {{ $.repos.trigger }}
    version: every
  - put: docker.loggregator-bridge
    params:
      build: git.loggregator-bridge
{{ end }}

{{ if has $images "persi" }}
{{ template "direct-build" (dict "repo" "persi" "subdir" "cmd/eirini-ext" "image" "persi" | merge $) }}
{{ end }}

{{ if has $images "persi-broker" }}
{{ template "direct-build" (dict "repo" "persi-broker" "subdir" "cmd/broker" "image" "persi-broker" | merge $) }}
{{ end }}

{{ if has $images "ssh" }}
{{ template "direct-build" (dict "repo" "ssh" "subdir" "cmd/extension" "image" "ssh" | merge $) }}
{{ end }}

{{ if has $images "ssh-proxy" }}
{{ template "direct-build" (dict "repo" "ssh" "subdir" "cmd/ssh-proxy" "image" "ssh-proxy" | merge $) }}
{{ end }}
